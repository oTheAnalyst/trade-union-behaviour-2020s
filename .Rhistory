RSQLite::dbListTables(con)
data1 <- RSQLite::dbReadTable(con, "kpi_employer_strikes")
data2 <- RSQLite::dbReadTable(con, "kpi_strikes")
national_data <- targets::tar_read(national_data)
# Load pre-saved RDS file
fy24 <- targets::tar_read(year.strikes.2024.monthly)
# Define UI components
color_by <- selectInput(
inputId = "color_var",
label = "Choose Color By:",
choices = c("employers", "strikes"),
selected = "strikes"
)
cards <- list(
card(
full_screen = TRUE,
card_header("Strikes"),
plotlyOutput("strikes")
)
)
ui <- page_fluid(
titlePanel("KPI for Union Strikes"),
layout_column_wrap(
value_box(
title = "Pay",
width = 4,
value = data2$Pay,
theme = "white"
),
value_box(
title = "Staffing",
width = 4,
value = data2$staffing,
theme = "white"
),
value_box(
title = "Recognition",
width = 4,
value = data2$Union.recognition,
theme = "white"
),
value_box(
title = "Health and Saftey",
width = 4,
value = data2$Health.and.safety,
theme = "white"
),
),
mainPanel(
plotOutput("strikes"),
plotOutput("fy24")
)
)
server <- function(input, output) {
# Reactive expression to generate the ggplot
output$strikes <- renderPlot({
ggplot(national_data, aes(x = Year, y = strikes ))+
geom_line()+
geom_point()+
xlab("Year")
})
output$fy24 <- renderPlot({
ggplot(fy24, aes(x = Year, y = strikes ))+
geom_line()+
geom_point()+
xlab("Year")
})
}
# Run the application
shinyApp(ui, server)
fy24 <- targets::tar_read(year.strikes.2024.monthly)
targets::tar_read(year.strikes.2024.monthly)
# Load required packages
library(shinydashboard)
library(shiny)
library(bslib)
library(targets)
library(ggplot2)
library(plotly)
library(DBI)
library(RSQLite)
file_location <- "~/trade_union-strikes.db"
con <- DBI::dbConnect(RSQLite::SQLite(), file_location)
RSQLite::dbListTables(con)
data1 <- RSQLite::dbReadTable(con, "kpi_employer_strikes")
data2 <- RSQLite::dbReadTable(con, "kpi_strikes")
national_data <- targets::tar_read(national_data)
# Load pre-saved RDS file
fy24 <- targets::tar_read(year.strikes.2024.monthly)
# Define UI components
color_by <- selectInput(
inputId = "color_var",
label = "Choose Color By:",
choices = c("employers", "strikes"),
selected = "strikes"
)
cards <- list(
card(
full_screen = TRUE,
card_header("Strikes"),
plotlyOutput("strikes")
)
)
ui <- page_fluid(
titlePanel("KPI for Union Strikes"),
layout_column_wrap(
value_box(
title = "Pay",
width = 4,
value = data2$Pay,
theme = "white"
),
value_box(
title = "Staffing",
width = 4,
value = data2$staffing,
theme = "white"
),
value_box(
title = "Recognition",
width = 4,
value = data2$Union.recognition,
theme = "white"
),
value_box(
title = "Health and Saftey",
width = 4,
value = data2$Health.and.safety,
theme = "white"
),
),
mainPanel(
plotOutput("strikes"),
plotOutput("fy24")
)
)
server <- function(input, output) {
# Reactive expression to generate the ggplot
output$strikes <- renderPlot({
ggplot(national_data, aes(x = Year, y = strikes ))+
geom_line()+
geom_point()+
xlab("Year")
})
output$fy24 <- renderPlot({
ggplot(fy24, aes(x = Month, y = strikes ))+
geom_line()+
geom_point()+
xlab("Year")
})
}
# Run the application
shinyApp(ui, server)
# Load required packages
library(shinydashboard)
library(shiny)
library(bslib)
library(targets)
library(ggplot2)
library(plotly)
library(DBI)
library(RSQLite)
file_location <- "~/trade_union-strikes.db"
con <- DBI::dbConnect(RSQLite::SQLite(), file_location)
RSQLite::dbListTables(con)
data1 <- RSQLite::dbReadTable(con, "kpi_employer_strikes")
data2 <- RSQLite::dbReadTable(con, "kpi_strikes")
national_data <- targets::tar_read(national_data)
# Load pre-saved RDS file
fy24 <- targets::tar_read(year.strikes.2024.monthly)
fy23 <- targets::tar_read(year.strikes.2023.monthly)
# Define UI components
color_by <- selectInput(
inputId = "color_var",
label = "Choose Color By:",
choices = c("employers", "strikes"),
selected = "strikes"
)
cards <- list(
card(
full_screen = TRUE,
card_header("Strikes"),
plotlyOutput("strikes")
)
)
ui <- page_fluid(
titlePanel("KPI for Union Strikes"),
layout_column_wrap(
value_box(
title = "Pay",
width = 4,
value = data2$Pay,
theme = "white"
),
value_box(
title = "Staffing",
width = 4,
value = data2$staffing,
theme = "white"
),
value_box(
title = "Recognition",
width = 4,
value = data2$Union.recognition,
theme = "white"
),
value_box(
title = "Health and Saftey",
width = 4,
value = data2$Health.and.safety,
theme = "white"
),
),
mainPanel(
plotOutput("strikes"),
plotOutput("fy24"),
plotOutput("fy23")
)
)
server <- function(input, output) {
# Reactive expression to generate the ggplot
output$strikes <- renderPlot({
ggplot(national_data, aes(x = Year, y = strikes ))+
geom_line()+
geom_point()+
ylim(0, 100)+
xlab("Year")
})
output$fy24 <- renderPlot({
ggplot(fy24, aes(x = Month, y = strikes ))+
geom_line()+
geom_point()+
ylim(0, 100)+
xlab("Year")
})
output$fy23 <- renderPlot({
ggplot(fy23, aes(x = Month, y = strikes ))+
geom_line()+
geom_point()+
ylim(0, 100)+
xlab("Year")
})
}
# Run the application
shinyApp(ui, server)
shiny::runApp()
?mainPanel()
??mainPanel()
?mainPanel()
runApp()
shiny::runApp()
shiny::runApp()
structure(list(AnimalID = c("A764539", "A761705", "A764599",
"A764545", "A764546", "A764548", "A764549", "A764538", "A764551",
"A764552"), Animal.x = c("Cat", "Dog", "Dog", "Dog", "Dog", "Dog",
"Cat", "Dog", "Dog", "Dog"), Intake_Date = structure(c(1514795100,
1514805720, 1514808240, 1514808240, 1514808240, 1514810400, 1514811540,
1514812740, 1514813460, 1514814420), tzone = "UTC", class = c("POSIXct",
"POSIXt")), Intake_Type = c("Stray", "Owner Surrender", "Public Assist",
"Public Assist", "Public Assist", "Stray", "Stray", "Stray",
"Stray", "Stray"), IntakePeriod = c("PreCovid", "PreCovid", "PreCovid",
"PreCovid", "PreCovid", "PreCovid", "PreCovid", "PreCovid", "PreCovid",
"PreCovid"), identity = c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,
1L), Outcome_Date = structure(c(1521998340, 1515858900, 1518877620,
1520694600, NA, NA, NA, NA, 1515955020, 1515348300), tzone = "UTC", class = c("POSIXct",
"POSIXt")), Outcome_Type = c("Adopted", "Adopted", "Adopted",
"Foster", NA, NA, NA, NA, "Adopted", "Adopted"), OutcomePeriod = c("PreCovid",
"PreCovid", "PreCovid", "PreCovid", NA, NA, NA, NA, "PreCovid",
"PreCovid"), intake_count = c(1L, 2L, 1L, 1L, 1L, 1L, 1L, 1L,
1L, 1L)), row.names = c(NA, -10L), class = c("tbl_df", "tbl",
"data.frame"))
data <- structure(list(AnimalID = c("A764539", "A761705", "A764599",
"A764545", "A764546", "A764548", "A764549", "A764538", "A764551",
"A764552"), Animal.x = c("Cat", "Dog", "Dog", "Dog", "Dog", "Dog",
"Cat", "Dog", "Dog", "Dog"), Intake_Date = structure(c(1514795100,
1514805720, 1514808240, 1514808240, 1514808240, 1514810400, 1514811540,
1514812740, 1514813460, 1514814420), tzone = "UTC", class = c("POSIXct",
"POSIXt")), Intake_Type = c("Stray", "Owner Surrender", "Public Assist",
"Public Assist", "Public Assist", "Stray", "Stray", "Stray",
"Stray", "Stray"), IntakePeriod = c("PreCovid", "PreCovid", "PreCovid",
"PreCovid", "PreCovid", "PreCovid", "PreCovid", "PreCovid", "PreCovid",
"PreCovid"), identity = c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,
1L), Outcome_Date = structure(c(1521998340, 1515858900, 1518877620,
1520694600, NA, NA, NA, NA, 1515955020, 1515348300), tzone = "UTC", class = c("POSIXct",
"POSIXt")), Outcome_Type = c("Adopted", "Adopted", "Adopted",
"Foster", NA, NA, NA, NA, "Adopted", "Adopted"), OutcomePeriod = c("PreCovid",
"PreCovid", "PreCovid", "PreCovid", NA, NA, NA, NA, "PreCovid",
"PreCovid"), intake_count = c(1L, 2L, 1L, 1L, 1L, 1L, 1L, 1L,
1L, 1L)), row.names = c(NA, -10L), class = c("tbl_df", "tbl",
"data.frame"))
str(data)
head(data)
colnames(data)
shelter <- eval(parse("https://gist.githubusercontent.com/driedkelp1/53d6aa9da8ca8fbb20d4795995874812/raw/2033ce93c254892cfc99dae13bb80bc55e08f1ec/gistfile1.txt")) #read in the dataset
str(shelter)
str(shelter)
head(shelter)
colnames(shelter)
?eval()
shelter |>
dplyr::distinct() |>
dplyr::where(Outcome_Type == "Adopted")
?dplyr::where
??dplyr::where
?dplyr::where
?dplyr::where()
shelter |>
dplyr::distinct() |>
dplyr::filter(Outcome_Type == "Adopted")
shelter |>
dplyr::group_by(AnimalID) |>
count()
shelter |>
dplyr::group_by(AnimalID) |>
nrow()
shelter |>
dplyr::distinct() |>
dplyr::filter(Outcome_Type == "Adopted")
shelter |>
dplyr::group_by(AnimalID) |>
nrow()
shelter |>
dplyr::group_by(AnimalID) |>
dplyr::distinct() |>
nrow()
shelter |>
dplyr::select(AnimalID) |>
dplyr::group_by(AnimalID) |>
dplyr::distinct() |>
nrow()
table(shelter$AnimalID)[adopted] # how many times do these animals show up in the dataset?
adopted <- unique(shelter$AnimalID[shelter$Outcome_Type == "Adopted"]) # which animals are adopted?
table(shelter$AnimalID)[adopted] # how many times do these animals show up in the dataset?
count(table(shelter$AnimalID)[adopted]) # how many times do these animals show up in the dataset?
nrow(table(shelter$AnimalID)[adopted]) # how many times do these animals show up in the dataset?
str(adopted)
shelter |>
dplyr::select(AnimalID) |>
dplyr::distinct() |>
dplyr::filter(Outcome_Type == "Adopted")
shelter <- eval(parse("https://gist.githubusercontent.com/driedkelp1/53d6aa9da8ca8fbb20d4795995874812/raw/2033ce93c254892cfc99dae13bb80bc55e08f1ec/gistfile1.txt")) #read in the dataset
shelter |>
dplyr::select(AnimalID) |>
dplyr::distinct() |>
dplyr::filter(Outcome_Type == "Adopted")
colnames(shelter)
shelter |>
dplyr::select(AnimalID) |>
dplyr::distinct() |>
dplyr::filter("Outcome_Type" == "Adopted")
shelter |>
dplyr::filter(Outcome_Type == "Adopted") |>
dplyr::select(AnimalID) |>
dplyr::distinct()
str(adopted)
shelter |>
dplyr::filter(Outcome_Type == "Adopted") |>
dplyr::select(AnimalID) |>
dplyr::distinct() |>
nrow()
??dplyr::distinct()
?dplyr::distinct()
shelter |>
dplyr::select(AnimalID) |>
dplyr::distinct() |>
nrow()
shelter |>
dplyr::select(AnimalID) |>
dplyr::group_by(AnimalID) |>
dplyr::distinct() |>
nrow()
shelter |>
dplyr::group_by(AnimalID) |>
dplyr::distinct() |>
nrow()
shelter |>
dplyr::filter(Outcome_Type == "Adopted") |>
dplyr::distinct() |>
nrow()
nrow(table(shelter$AnimalID)[adopted]) # how many times do these animals show up in the dataset?
str(adopted)
check <- shelter |>
dplyr::group_by(AnimalID) |>
dplyr::distinct() |>
nrow()
str(check)
str(adopted)
check <- shelter |>
dplyr::group_by(AnimalID) |>
dplyr::distinct()
str(check)
shelter |>
dplyr::filter(Outcome_Type == "Adopted") |>
dplyr::select(AnimalID) |>
dplyr::distinct() |>
nrow()
scount <- shelter |>
dplyr::filter(Outcome_Type == "Adopted") |>
dplyr::select(AnimalID) |>
dplyr::distinct() |>
nrow()
scount <- shelter |>
dplyr::filter(Outcome_Type == "Adopted") |>
dplyr::select(AnimalID) |>
dplyr::distinct()
str(scount)
colnames(shelter)
scount <- shelter |>
dplyr::filter(Outcome_Type == "Adopted") |>
dplyr::mutate(Outcome_Type = row_number() * is.na(Outcome_Type))
scount <- shelter |>
dplyr::filter(Outcome_Type == "Adopted") |>
dplyr::select(AnimalID) |>
dplyr::distinct()
str(scount)
head(shelter)
scount <- shelter |>
dplyr::filter(Outcome_Type == "Adopted") |>
dplyr::select(AnimalID) |>
dplyr::distinct()
str(scount)
nrow(table(shelter$AnimalID)[adopted]) # how many times do these animals show up in the dataset?
shelter |>
dplyr::select(AnimalID) |>
dplyr::group_by(AnimalID) |>
unique() |>
nrow()
scount <- shelter |>
dplyr::filter(Outcome_Type == "Adopted") |>
dplyr::select(AnimalID) |>
unique() |>
dplyr::distinct()
scount <- shelter |>
dplyr::filter(Outcome_Type == "Adopted") |>
dplyr::select(AnimalID) |>
unique() |>
dplyr::distinct()
str(scount)
scount <- shelter |>
dplyr::filter(Outcome_Type == "Adopted") |>
dplyr::select(AnimalID) |>
unique() |>
str(scount)
scount <- shelter |>
dplyr::filter(Outcome_Type == "Adopted") |>
dplyr::select(AnimalID) |>
unique()
str(scount)
nrow(table(shelter$AnimalID)[adopted]) # how many times do these animals show up in the dataset?
View(adopted)
View(scount)
View(as.vector(adopted))
View(as.data.frame(adopted))
scount <- shelter |>
dplyr::filter(Outcome_Type == "Adopted") |>
dplyr::select(AnimalID) |>
unique()
str(scount)
scount <- shelter |>
dplyr::filter(Outcome_Type == "Adopted")
str(scount)
scount <- shelter |>
dplyr::filter(Outcome_Type == "Adopted",
Outcome_Type == NA) |>
dplyr::select(AnimalID) |>
unique()
str(scount)
scount <- shelter |>
dplyr::filter(Outcome_Type == "Adopted")
dplyr::select(AnimalID) |>
unique()
scount <- shelter |>
dplyr::filter(Outcome_Type == "Adopted") |>
dplyr::select(AnimalID) |>
unique()
shelter |>
dplyr::select(AnimalID) |>
shelter |>
dplyr::select(AnimalID)
str(shelter)
shelter |>
dplyr::select(AnimalID)
shelter |>
dplyr::select(AnimalID) |> View()
shelter |>
View()
shelter |>
View()
scount <- shelter |>
dplyr::filter(Outcome_Type == "Adopted") |>
dplyr::select(AnimalID) |>
unique()
str(scount)
scount <- shelter |>
dplyr::filter(Outcome_Type == "Adopted") |>
dplyr::select(AnimalID) |>
dplyr::distinct()
str(scount)
shelter <- eval(parse("https://gist.githubusercontent.com/driedkelp1/53d6aa9da8ca8fbb20d4795995874812/raw/2033ce93c254892cfc99dae13bb80bc55e08f1ec/gistfile1.txt")) #read in the dataset
str(shelter)
scount <- shelter |>
dplyr::filter(Outcome_Type == "Adopted") |>
dplyr::select(AnimalID) |>
dplyr::distinct()
str(scount)
scount <- shelter |>
dplyr::filter(Outcome_Type == "Adopted") |>
dplyr::select(AnimalID) |>
dplyr::distinct()
View(scount)# which animals are adopted?
str(scount)# how many times do these animals show up in the dataset?
table(shelter$AnimalID)[adopted] # how many times do these animals show up in the dataset?
