tar_make()
tar_visnetwork()
library(targets)
library(tarchetypes)
library(here)
here::i_am("_targets.R")
source(here("functions", "functions.R"))
options(clustermq.schedular = "multicore")
tar_option_set(
packages = c(
"tidyverse",
"targets",
"rmarkdown",
"openxlsx",
"readxl"),
format = "rds")
list(
tar_target(
transformed_,
load_and_transform_data(1),
format = "rds"
),
tar_target(
dc_data,
number_of("District of Columbia", transformed_),
format = "rds"
),
tar_target(
md_data,
number_of("Maryland", transformed_),
format = "rds"
),
tar_target(
va_data,
number_of("Virginia", transformed_),
format = "rds"
),
tar_target(
national_data,
number_of("national", transformed_),
format = "rds"
),
tar_target(
states_vector,
united_states_total_states(),
format = "rds"
),
tar_target(
states_and_territories,
number_of(states_vector, transformed_),
format = "rds"
),
tar_target(
year.strikes.2024.monthly,
month_year_var_number(
state_var = "national",
year_var = 2024,
transformed_data = transformed_
),
format = "rds"
),
tar_target(
year.strikes.2023.monthly,
month_year_var_number(
state_var = "national",
year_var = 2023,
transformed_data = transformed_
),
format = "rds"
),
tar_render(
paper,
here("paper", "strike_analysis.rmd")
),
tar_target(
target_list,
{
list(
dc_data = dc_data,
md_data = md_data,
va_data = va_data,
national_data = national_data,
year.strikes.2024.monthly = year.strikes.2024.monthly,
year.strikes.2023.monthly = year.strikes.2023.monthly,
states_and_territories = states_and_territories
)
}
),
tar_target(output_file,
write_data_to_excel(target_list,
here("data", "output", "tableau_upload.xlsx")),
format = "file")
)
tar_make()
tar_visnetwork()
n
library(shinydashboard)
library(shiny)
library(bslib)
library(targets)
library(ggplot2)
library(plotly)
head(national_data)
library(shinydashboard)
library(shinydashboard)
library(shiny)
library(bslib)
library(targets)
library(ggplot2)
library(plotly)
head(national_data)
library(DBI)
library(RSQLite)
file_location <- "~/trade_union-strikes.db"
con <- DBI::dbConnect(RSQLite::SQLite(), file_location)
RSQLite::dbListTables(con)
data1 <- RSQLite::dbReadTable(con, "kpi_employer_strikes")
print(data1)
data2 <- RSQLite::dbReadTable(con, "kpi_strikes")
print(data2)
data2$Pay
data2$Pay
base::as.numeric(data2$Pay)
runApp()
head(national_data)
targets::tar_read(national_data)
national_data <- targets::tar_read(national_data)
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
q()
shiny::runApp()
shiny::runApp()
library(shinydashboard)
library(shiny)
library(bslib)
library(targets)
library(ggplot2)
library(plotly)
library(DBI)
library(RSQLite)
?layout_column_wrap()
data2
data2
data1 <- RSQLite::dbReadTable(con, "kpi_employer_strikes")
library(DBI)
library(RSQLite)
?layout_column_wrap()
file_location <- "~/trade_union-strikes.db"
con <- DBI::dbConnect(RSQLite::SQLite(), file_location)
RSQLite::dbListTables(con)
data1 <- RSQLite::dbReadTable(con, "kpi_employer_strikes")
data2 <- RSQLite::dbReadTable(con, "kpi_strikes")
data2$Pay
data2
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
data2
file_location <- "~/trade_union-strikes.db"
con <- DBI::dbConnect(RSQLite::SQLite(), file_location)
RSQLite::dbListTables(con)
data1 <- RSQLite::dbReadTable(con, "kpi_employer_strikes")
data2 <- RSQLite::dbReadTable(con, "kpi_strikes")
data2$Pay
shiny::runApp()
# Load required packages
library(shinydashboard)
library(shiny)
library(bslib)
library(targets)
library(ggplot2)
library(plotly)
library(DBI)
library(RSQLite)
file_location <- "~/trade_union-strikes.db"
con <- DBI::dbConnect(RSQLite::SQLite(), file_location)
RSQLite::dbListTables(con)
data1 <- RSQLite::dbReadTable(con, "kpi_employer_strikes")
data2 <- RSQLite::dbReadTable(con, "kpi_strikes")
national_data <- targets::tar_read(national_data)
print(national_data)
# Load pre-saved RDS file
# Define UI components
color_by <- selectInput(
inputId = "color_var",
label = "Choose Color By:",
choices = c("employers", "strikes"),
selected = "strikes"
)
cards <- list(
card(
full_screen = TRUE,
card_header("Strikes"),
plotlyOutput("strikes")
)
)
ui <- page_fluid(
titlePanel("KPI for Union Strikes"),
layout_column_wrap(
value_box(
title = "Pay",
width = 4,
value = data2$Pay,
theme = "white"
),
value_box(
title = "Staffing",
width = 4,
value = data2$staffing,
theme = "white"
),
value_box(
title = "Recognition",
width = 4,
value = data2$Union.recognition,
theme = "white"
),
value_box(
title = "Health and Saftey",
width = 4,
value = data2$Health.and.safety,
theme = "white"
),
),
mainPanel(
plotOutput("strikes")))
server <- function(input, output) {
# Reactive expression to generate the ggplot
output$strikes <- renderPlot({
ggplot(national_data, aes(x = Year, y = strikes ))+
geom_line()+
geom_point()+
xlab("Year")
})
}
# Run the application
shinyApp(ui, server)
targets::tar_read(year.strikes.2024.monthly)
fy24 <- targets::tar_read(year.strikes.2024.monthly)
# Load required packages
library(shinydashboard)
library(shiny)
library(bslib)
library(targets)
library(ggplot2)
library(plotly)
library(DBI)
library(RSQLite)
file_location <- "~/trade_union-strikes.db"
con <- DBI::dbConnect(RSQLite::SQLite(), file_location)
RSQLite::dbListTables(con)
data1 <- RSQLite::dbReadTable(con, "kpi_employer_strikes")
data2 <- RSQLite::dbReadTable(con, "kpi_strikes")
national_data <- targets::tar_read(national_data)
# Load pre-saved RDS file
fy24 <- targets::tar_read(year.strikes.2024.monthly)
# Define UI components
color_by <- selectInput(
inputId = "color_var",
label = "Choose Color By:",
choices = c("employers", "strikes"),
selected = "strikes"
)
cards <- list(
card(
full_screen = TRUE,
card_header("Strikes"),
plotlyOutput("strikes")
)
)
ui <- page_fluid(
titlePanel("KPI for Union Strikes"),
layout_column_wrap(
value_box(
title = "Pay",
width = 4,
value = data2$Pay,
theme = "white"
),
value_box(
title = "Staffing",
width = 4,
value = data2$staffing,
theme = "white"
),
value_box(
title = "Recognition",
width = 4,
value = data2$Union.recognition,
theme = "white"
),
value_box(
title = "Health and Saftey",
width = 4,
value = data2$Health.and.safety,
theme = "white"
),
),
mainPanel(
plotOutput("strikes"),
plotOutput("fy24")
)
)
server <- function(input, output) {
# Reactive expression to generate the ggplot
output$strikes <- renderPlot({
ggplot(national_data, aes(x = Year, y = strikes ))+
geom_line()+
geom_point()+
xlab("Year")
})
output$fy24 <- renderPlot({
ggplot(fy24, aes(x = Year, y = strikes ))+
geom_line()+
geom_point()+
xlab("Year")
})
}
# Run the application
shinyApp(ui, server)
fy24 <- targets::tar_read(year.strikes.2024.monthly)
targets::tar_read(year.strikes.2024.monthly)
# Load required packages
library(shinydashboard)
library(shiny)
library(bslib)
library(targets)
library(ggplot2)
library(plotly)
library(DBI)
library(RSQLite)
file_location <- "~/trade_union-strikes.db"
con <- DBI::dbConnect(RSQLite::SQLite(), file_location)
RSQLite::dbListTables(con)
data1 <- RSQLite::dbReadTable(con, "kpi_employer_strikes")
data2 <- RSQLite::dbReadTable(con, "kpi_strikes")
national_data <- targets::tar_read(national_data)
# Load pre-saved RDS file
fy24 <- targets::tar_read(year.strikes.2024.monthly)
# Define UI components
color_by <- selectInput(
inputId = "color_var",
label = "Choose Color By:",
choices = c("employers", "strikes"),
selected = "strikes"
)
cards <- list(
card(
full_screen = TRUE,
card_header("Strikes"),
plotlyOutput("strikes")
)
)
ui <- page_fluid(
titlePanel("KPI for Union Strikes"),
layout_column_wrap(
value_box(
title = "Pay",
width = 4,
value = data2$Pay,
theme = "white"
),
value_box(
title = "Staffing",
width = 4,
value = data2$staffing,
theme = "white"
),
value_box(
title = "Recognition",
width = 4,
value = data2$Union.recognition,
theme = "white"
),
value_box(
title = "Health and Saftey",
width = 4,
value = data2$Health.and.safety,
theme = "white"
),
),
mainPanel(
plotOutput("strikes"),
plotOutput("fy24")
)
)
server <- function(input, output) {
# Reactive expression to generate the ggplot
output$strikes <- renderPlot({
ggplot(national_data, aes(x = Year, y = strikes ))+
geom_line()+
geom_point()+
xlab("Year")
})
output$fy24 <- renderPlot({
ggplot(fy24, aes(x = Month, y = strikes ))+
geom_line()+
geom_point()+
xlab("Year")
})
}
# Run the application
shinyApp(ui, server)
# Load required packages
library(shinydashboard)
library(shiny)
library(bslib)
library(targets)
library(ggplot2)
library(plotly)
library(DBI)
library(RSQLite)
file_location <- "~/trade_union-strikes.db"
con <- DBI::dbConnect(RSQLite::SQLite(), file_location)
RSQLite::dbListTables(con)
data1 <- RSQLite::dbReadTable(con, "kpi_employer_strikes")
data2 <- RSQLite::dbReadTable(con, "kpi_strikes")
national_data <- targets::tar_read(national_data)
# Load pre-saved RDS file
fy24 <- targets::tar_read(year.strikes.2024.monthly)
fy23 <- targets::tar_read(year.strikes.2023.monthly)
# Define UI components
color_by <- selectInput(
inputId = "color_var",
label = "Choose Color By:",
choices = c("employers", "strikes"),
selected = "strikes"
)
cards <- list(
card(
full_screen = TRUE,
card_header("Strikes"),
plotlyOutput("strikes")
)
)
ui <- page_fluid(
titlePanel("KPI for Union Strikes"),
layout_column_wrap(
value_box(
title = "Pay",
width = 4,
value = data2$Pay,
theme = "white"
),
value_box(
title = "Staffing",
width = 4,
value = data2$staffing,
theme = "white"
),
value_box(
title = "Recognition",
width = 4,
value = data2$Union.recognition,
theme = "white"
),
value_box(
title = "Health and Saftey",
width = 4,
value = data2$Health.and.safety,
theme = "white"
),
),
mainPanel(
plotOutput("strikes"),
plotOutput("fy24"),
plotOutput("fy23")
)
)
server <- function(input, output) {
# Reactive expression to generate the ggplot
output$strikes <- renderPlot({
ggplot(national_data, aes(x = Year, y = strikes ))+
geom_line()+
geom_point()+
ylim(0, 100)+
xlab("Year")
})
output$fy24 <- renderPlot({
ggplot(fy24, aes(x = Month, y = strikes ))+
geom_line()+
geom_point()+
ylim(0, 100)+
xlab("Year")
})
output$fy23 <- renderPlot({
ggplot(fy23, aes(x = Month, y = strikes ))+
geom_line()+
geom_point()+
ylim(0, 100)+
xlab("Year")
})
}
# Run the application
shinyApp(ui, server)
shiny::runApp()
?mainPanel()
??mainPanel()
?mainPanel()
runApp()
shiny::runApp()
shiny::runApp()
